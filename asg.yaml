AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to create a VPC with public and private subnets'

Parameters:
  bastion:
    Type: String
    Description: "The key pair name to be used for the Bastion Host EC2 instance"

Resources:
  # VPC
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '172.16.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Public Subnet in AZ 1
  PublicSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1A
  
  # Public Subnet in AZ 2 (Fixed Missing Definition)
  PublicSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.3.0/24'  # Ensure CIDR is correct
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2B

  # App Private Subnet in AZ 1
  AppPrivateSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.2.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: AppPrivateSubnet1A

  # App Private Subnet in AZ 2
  AppPrivateSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.5.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: AppPrivateSubnet2B

  # Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  
  # Route for Internet Gateway
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1ARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2BRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2B
      RouteTableId: !Ref PublicRouteTable

 # Web Server / ALB Security Group
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable HTTP Access'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0' 

MyLoadBalancer:
  Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  Properties: 
    Subnets:
      - !Ref PublicSubnet1A
      - !Ref PublicSubnet2B
    SecurityGroups:
      - !Ref WebServerSecurityGroup
    Scheme: internet-facing
    LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 60

MyListener:
  Type: 'AWS::ElasticLoadBalancingV2::Listener'
  Properties:
    LoadBalancerArn: !Ref MyLoadBalancer
    Port: 80
    Protocol: 'HTTP'
    DefaultActions:
      - Type: 'forward'
        TargetGroupArn: !Ref MyTargetGroup

MyLaunchTemplate:
  Type: 'AWS::EC2::LaunchTemplate'
  Properties:
    LaunchTemplateName: "MyLaunchTemplate"
    LaunchTemplateData:
      ImageId: 'ami-0d5f18fbcad6fd6d6'
      InstanceType: 't2.micro'
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello from Auto Scaling Instance" > /var/www/html/index.html

  # ASG
MyAutoScalingGroup:
  Type: 'AWS::AutoScaling::AutoScalingGroup'
  DependsOn: MyLaunchTemplate
  Properties:
    LaunchTemplate:
      LaunchTemplateId: !Ref MyLaunchTemplate
      Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
    MinSize: 1
    MaxSize: 3
    DesiredCapacity: 2
    VPCZoneIdentifier:
      - !Ref PublicSubnet1A
      - !Ref PublicSubnet2B
    TargetGroupARNs:
      - !Ref MyTargetGroup

MyTargetGroup:
  Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  Properties:
    VpcId: !Ref MyVPC
    Port: 80
    Protocol: 'HTTP'
    TargetType: instance
    HealthCheckProtocol: HTTP
    HealthCheckPath: /
    HealthCheckIntervalSeconds: 30
    HealthCheckTimeoutSeconds: 5
    HealthyThresholdCount: 3
    UnhealthyThresholdCount: 2

# Alarm
HighCPUAlarm:
  Type: 'AWS::CloudWatch::Alarm'
  Properties:
    AlarmDescription: 'Alarm when CPU exceeds 70%'
    MetricName: 'CPUUtilization'
    Namespace: 'AWS/EC2'
    Statistic: Average
    Period: '300'
    EvaluationPeriods: 1
    Threshold: 70
    ComparisonOperator: GreaterThanThreshold
    Dimensions: 
      - Name: AutoScalingGroupName
        Value: !Ref MyAutoScalingGroup
    AlarmActions:
      - !Ref ScaleOutPolicy

# Scale Out Policy
ScaleOutPolicy:
  Type: 'AWS::AutoScaling::ScalingPolicy'
  Properties: 
    AutoScalingGroupName: !Ref MyAutoScalingGroup
    PolicyType: SimpleScaling
    ScalingAdjustment: 1
    Cooldown: 300
    AdjustmentType: ChangeInCapacity

      





        